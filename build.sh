#!/bin/bash
# Script version
version="0.1.0"
# Image Name
name="dden"
#
# This is an optional arguments-only example of Argbash potential
#
# ARG_OPTIONAL_SINGLE([release],[r],[Make a release with the given version],[latest])
# ARG_VERSION([echo test v$version])
# ARG_HELP([The Docker based Development Environment build script])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='rvh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_release="latest"


print_help()
{
	printf '%s\n' "The Docker based Development Environment build script"
	printf 'Usage: %s [-r|--release <arg>] [-v|--version] [-h|--help]\n' "$0"
	printf '\t%s\n' "-r, --release: Make a release with the given version (default: 'latest')"
	printf '\t%s\n' "-v, --version: Prints version"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-r|--release)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_release="$2"
				shift
				;;
			--release=*)
				_arg_release="${_key##--release=}"
				;;
			-r*)
				_arg_release="${_key##-r}"
				;;
			-v|--version)
				echo test v$version
				exit 0
				;;
			-v*)
				echo test v$version
				exit 0
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

# Build the image
docker build --tag=${name}:${_arg_release} .

if [ $_arg_release != "latest" ]
then
	docker tag ${name}:${_arg_release} psugrg/${name}:${_arg_release}
	docker push psugrg/${name}:${_arg_release}
fi

# ] <-- needed because of Argbash
